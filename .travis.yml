# CI pipeline for travis 
# the goals are to
# - automate builds
# - report code coverage
# - deploy automatically for several platforms


# In a linux environment: 
#   - do testing for all the rust versions
#   Rust stable
#   - upload tarpaulin coverage report 
#   - publish to crates.io - only when tag is something nonempty that does not have "build" in it
dist: bionic
os:
  - linux
  - osx
language: rust
rust:
  - stable
  - 1.38.0
  - beta
  - nightly
jobs:
  include:
    - os: linux
    - os: osx
      rust: stable
  exclude:
    - os: osx
      if: env(TRAVIS_TAG) IS blank
  allow_failures:
    - rust: nightly
    - rust: beta
  fast_finish: true
    
cache:
  directories:
    - ${HOME}/.cargo

# before_install: Scripts to run before the install stage
# install: Scripts to run at the install stage
# - need tarpaulin for code coverage in the linux-stable combination
install: |
  if [[ "$TRAVIS_RUST_VERSION" == stable && $TRAVIS_OS_NAME == "linux" ]]; then
    echo "Installing tarpaulin"
    cargo install cargo-tarpaulin
    if [[ $TRAVIS_BRANCH == master ]]; then
      echo "Installing mdbook"
      cargo install mdbook
    fi
  else
    echo "Not installing tarpaulin or mdbook"
  fi
  
  
# before_script: Scripts to run before the script stage
before_script: |
  if [[ "$TRAVIS_RUST_VERSION" == stable && "$TRAVIS_EVENT_TYPE" == cron ]]; then
    for TAG in $(git tag | grep -)
    do
      git push --delete https://${GITHUB_TOKEN}@github.com/${TRAVIS_REPO_SLUG}.git  $TAG 
    done
  fi


# script: Scripts to run at the script stage
script:
  - cargo build
  - |
    if [[ "$TRAVIS_RUST_VERSION" != stable ]]; then
      cargo test
    elif [[ $TRAVIS_OS_NAME == "linux" ]]; then
      cargo tarpaulin --ignore-tests --exclude-files examples/* src/main.rs --out Xml --run-types AllTargets
      # upload to codecov.io coverage results
      bash <(curl -s https://codecov.io/bash)
    fi


# before_cache: Scripts to run before storing a build cache
before_cache:
  - find ./target/debug -type f -maxdepth 1 -delete
  - rm -fr ./target/debug/{deps,.fingerprint}/{*ra_*,*test*,*tools*,*gen_lsp*,*thread_worker*,*dinero*}
  - rm -f  ./target/.rustc_info.json
  - rm -rf ${HOME}/.cargo/registry

# after_success: Scripts to run after a successful script stage
# If the build comes from a tag named appropriately
# in the linux-stable combination, upload to crates.io
after_success: |
  # Get the version from Cargo
  export version=$(grep -E "version = \"([0-9]+\.[0-9]+.[0-9]+)\"" Cargo.toml | grep -Eo -m 1 "[0-9]+\.[0-9]+.[0-9]+")
  echo "Cargo.toml version: -${version}-"
  echo "Tag name:           -${TRAVIS_TAG}-"

  if [[ "$TRAVIS_RUST_VERSION" == stable && $TRAVIS_OS_NAME == "linux" ]]; then
    # If this build is not from a tag, create one
    if [[ "$TRAVIS_TAG" == "" ]]; then
      if [[ "$TRAVIS_BRANCH" == "master" && "$TRAVIS_EVENT_TYPE" == "pull_request" ]]; then
        # If the build is from master we actually create a tag
        # Build a tag
        # This prints the version number
        export line_number=$(grep -En "version = \"([0-9]+\.[0-9]+.[0-9]+)\"" Cargo.toml | grep -Eo -m 1 "[0-9]+" | head -n 1)
        sed -i "${line_number}s/.*/version = \"${version}-build-${TRAVIS_BUILD_NUMBER}\"/" Cargo.toml 
        git tag -a -m "[ci skip] automated tag from Travis" ${version}-build-${TRAVIS_BUILD_NUMBER}
        git push -f --tags https://${GITHUB_TOKEN}@github.com/${TRAVIS_REPO_SLUG}.git
      fi

    # If it is from a tag...
    elif [[ "$TRAVIS_TAG" != "*build*" ]]; then
      echo "Publishing to crates.io"
      if [[ "$TRAVIS_TAG" != "$version" ]]; then
        echo "Expected $TRAVIS_TAG from tag name."
        echo "Found $version in Cargo.toml"
        travis_terminate 1
      fi
      rm cobertura.xml
      cargo publish --token ${CARGO_TOKEN}

      echo "Bump for future development"
      message=$(source scripts/ci_bump_version.sh)
      git commit -a -m "${message}"
      git push https://${GITHUB_TOKEN}@github.com/${TRAVIS_REPO_SLUG}.git
    fi 
  fi
  

# after_failure: Scripts to run after a failing script stage
# before_deploy: Scripts to run before the deploy stage
before_deploy: |
  # This is only executed when we are in Mac and are going to publish somethin
  echo "Operating system: ${TRAVIS_OS_NAME}"
  if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
    echo "Deploy phase restricted to osx"
    travis_terminate 0
      if [[ "$TRAVIS_TAG" != "$version" ]]; then
        echo "Expected $TRAVIS_TAG from tag name."
        echo "Found $version in Cargo.toml"
        travis_terminate 1
      fi
  
    # Create the releases
    echo "Current directory"
    pwd

    #
    # Package everything
    #

    # Intel macs
    echo "------------------------"
    echo "- Build for intel Macs -"
    echo "------------------------"
    rustup target add x86_64-apple-darwin
    cargo build --release --target x86_64-apple-darwin 
    cd ${HOME}/build/${TRAVIS_REPO_SLUG}/target/x86_64-apple-darwin/release/
    tar -czf dinero-mac-x86_64.tar.gz dinero
    mv dinero-mac-x86_64.tar.gz ${HOME}/build/${TRAVIS_REPO_SLUG}

    # New macs
    echo "----------------------"
    echo "- Build for ARM Macs -"
    echo "----------------------"
    rustup target add aarch64-apple-darwin 
    cargo build --release --target aarch64-apple-darwin 
    cd ${HOME}/build/${TRAVIS_REPO_SLUG}/target/aarch64-apple-darwin/release/
    tar -czf dinero-mac-aarch64.tar.gz dinero
    mv dinero-mac-aarch64.tar.gz ${HOME}/build/${TRAVIS_REPO_SLUG}
    
    # Windows 
    echo "---------------------"
    echo "- Build for Windows -"
    echo "---------------------"
    rustup target add x86_64-pc-windows-gnu
    cargo build --release --target x86_64-pc-windows-gnu
    cd ${HOME}/build/${TRAVIS_REPO_SLUG}/target/x86_64-pc-windows-gnu/release/
    tar -czf dinero-windows-x86_64.tar.gz dinero.exe
    mv dinero-windows-x86_64.tar.gz ${HOME}/build/${TRAVIS_REPO_SLUG}/

    # Raspberry
    # rustup target add armv7-unknown-linux-gnueabihf
    # rustup target add aarch64-unknown-linux-gnu
    # rustup target add x86_64-unknown-linux-gnu
    # cargo build --release --target armv7-unknown-linux-gnueabihf
    # Linux ARM
    # cargo build --release --target aarch64-unknown-linux-gnu
    # Linux x86
    # cargo build --release --target x86_64-unknown-linux-gnu
  
  else
    if [ $TRAVIS_PULL_REQUEST ]; then travis_terminate 0; fi
    # Build the book
    cd docs
    mdbook build
    mdbook test  
  fi
  
  
deploy:
  - provider: releases
    token: $GITHUB_TOKEN
    file: "*.gz"
    release_notes_file: CHANGELOG.md
    edge: true # opt in to dpl v2
    on:
      condition: $TRAVIS_OS_NAME = osx
      rust: stable
      tags: true
  - provider: pages
    strategy: git
    edge: true
    cleanup: false
    github-token: $GITHUB_TOKEN
    local-dir: docs/book
    keep-history: false
    on:
      condition: $TRAVIS_OS_NAME = linux
      rust: stable
      branch: master
    target_branch: gh-pages
# after_deploy: Scripts to run after the deploy stage
# after_script: Scripts to run as the last stage

  