# CI pipeline for travis 
# the goals are to
# - automate builds
# - report code coverage
# - deploy automatically for several platforms

language: rust
rust:
  - stable
  - 1.38.0
  - beta
  - nightly
cache:
  directories:
    - /home/travis/.cargo

dist: bionic
jobs:
  allow_failures:
    - rust: nightly
    - rust: beta
  fast_finish: true

# before_install: Scripts to run before the install stage
# install: Scripts to run at the install stage
install: |
  echo "Rust: ${TRAVIS_RUST_VERSION}"
  echo "Event: ${TRAVIS_EVENT_TYPE}"
  echo "Tag: ${TRAVIS_TAG}"
  if [[ "$TRAVIS_RUST_VERSION" == stable ]]; then
    cargo install cargo-tarpaulin
    if [[ "$TRAVIS_TAG" != "" ]]; then
      echo "Installing additional targets."
      rustup target add x86_64-apple-darwin
      rustup target add aarch64-apple-darwin 
      rustup target add armv7-unknown-linux-gnueabihf
      rustup target add aarch64-unknown-linux-gnu
      rustup target add x86_64-unknown-linux-gnu
      rustup target add x86_64-pc-windows-gnu
      # rustup target add x86_64-pc-windows-msvctarget
      echo "finished rustup installation"
    fi
  fi
  
# before_script: Scripts to run before the script stage
before_script: |
  if [[ "$TRAVIS_RUST_VERSION" == stable && "$TRAVIS_EVENT_TYPE" == cron ]]; then
    for TAG in $(git tag | grep -)
    do
      git push --delete https://${GITHUB_TOKEN}@github.com/frosklis/dinero-rs.git  $TAG 
    done
  fi


# script: Scripts to run at the script stage
script:
  - cargo build
  - |
    if [[ "$TRAVIS_RUST_VERSION" != stable ]]; then
      cargo test
    else
      cargo tarpaulin --ignore-tests --exclude-files examples/* src/main.rs --out Xml --run-types AllTargets
    fi


# before_cache: Scripts to run before storing a build cache
before_cache:
  - find ./target/debug -type f -maxdepth 1 -delete
  - rm -fr ./target/debug/{deps,.fingerprint}/{*ra_*,*test*,*tools*,*gen_lsp*,*thread_worker*,*dinero*}
  - rm -f  ./target/.rustc_info.json
  - rm -rf /home/travis/.cargo/registry

# after_success: Scripts to run after a successful script stage
after_success: |
  if [[ "$TRAVIS_RUST_VERSION" == stable ]]; then
    # upload to codecov.io coverage results
    bash <(curl -s https://codecov.io/bash)
    
    # Get the version from Cargo
    export version=$(grep -E "version = \"([0-9]+\.[0-9]+.[0-9]+)\"" Cargo.toml | grep -Eo -m 1 "[0-9]+\.[0-9]+.[0-9]+")

    echo "Cargo.toml version: -${version}-"
    echo "Tag name:           -${TRAVIS_TAG}-"
    # If this build is not from a tag, create one
    if [[ "$TRAVIS_TAG" == "" ]]; then
      if [[ "$TRAVIS_BRANCH" == "master" && "$TRAVIS_EVENT_TYPE" == "pull_request" ]]; then
        # If the build is from master we actually create a tag
        # Build a tag
        # This prints the version number
        export line_number=$(grep -En "version = \"([0-9]+\.[0-9]+.[0-9]+)\"" Cargo.toml | grep -Eo -m 1 "[0-9]+" | head -n 1)
        sed -i "${line_number}s/.*/version = \"${version}-build-${TRAVIS_BUILD_NUMBER}\"/" Cargo.toml 
        git tag -a -m "automated tag from Travis [ci skip]" ${version}-build-${TRAVIS_BUILD_NUMBER}
        git push -f --tags https://${GITHUB_TOKEN}@github.com/frosklis/dinero-rs.git
      fi

    # If it is from a tag...
    elif [[ "$TRAVIS_TAG" != *"build"* ]]; then
      if [[ "$TRAVIS_TAG" != "$version" ]]; then
        echo "Expected $TRAVIS_TAG from tag name."
        echo "Found $version in Cargo.toml"
        exit 1
      fi
      rm cobertura.xml
      cargo publish --token ${CARGO_TOKEN}
    fi 
  fi
  

# after_failure: Scripts to run after a failing script stage
# before_deploy: Scripts to run before the deploy stage
before_deploy: |
  if [[ "$TRAVIS_RUST_VERSION" != stable ]]; then
    travis_terminate 0
  else   
    # Create the releases
    # Macs
    cargo build --release --verbose --target x86_64-apple-darwin 
    # New macs
    cargo build --release --verbose --target aarch64-apple-darwin 
    # Raspberry
    # cargo build --release --verbose --target armv7-unknown-linux-gnueabihf
    # Linux ARM
    # cargo build --release --verbose --target aarch64-unknown-linux-gnu
    # Linux x86
    # cargo build --release --verbose --target x86_64-unknown-linux-gnu
    # Windows 
    cargo build --release --verbose --target x86_64-pc-windows-gnu
    # cargo build --release --verbose --target x86_64-pc-windows-msvc

    # Package everything
    tar -czf dinero-mac-x86_64.tar.gz /home/travis/build/frosklis/dinero-rs/target/x86_64-apple-darwin/release/dinero
    tar -czf dinero-mac-aarch64.tar.gz /home/travis/build/frosklis/dinero-rs/target/aarch64-apple-darwin/release/dinero
    tar -czf dinero-windows-x86_64.tar.gz /home/travis/build/frosklis/dinero-rs/target/x86_64-pc-windows-gnu/release/dinero
  fi
  
deploy:
  provider: releases
  token: $GITHUB_TOKEN
  file: "*.gz"
  release_notes_file: CHANGELOG.md
  edge: true # opt in to dpl v2
  on:
    tags: true
# after_deploy: Scripts to run after the deploy stage
# after_script: Scripts to run as the last stage
